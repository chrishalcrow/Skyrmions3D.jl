var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Here are all the exported functions of Skyrmions3D.","category":"page"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/#Skyrmions3D.Skyrmion","page":"API","title":"Skyrmions3D.Skyrmion","text":"Skyrmion(lp::Int64, ls::Float64; kwargs...)\nSkyrmion([lpx, lpy, lpx], [lsx, lsy, lsz]; kwargs...)\n\nCreate a skyrme field with lp lattice points and ls lattice spacing. \n\nOptional arguments\n\nmpi = 0.0: sets the pion mass for this Skyrme field\nFpi = 180: sets the pion decay constant for this Skyrme field\nee = 4.0: sets the Skyrme constant for this Skyrme field\nphysical = false: whether the Skyrmion is using physical units\n\n\n\n\n\n","category":"type"},{"location":"api/#Skyrmions3D.Grid","page":"API","title":"Skyrmions3D.Grid","text":"Grid([lpx, lpy, lpx], [lsx, lsy, lsz], boundary_conditions::String)\n\nCreate a Grid field with lp lattice points and ls lattice spacing. \n\nOptional arguments\n\nboundary_conditions\n\n\n\n\n\n","category":"type"},{"location":"api/#Set-up-the-system","page":"API","title":"Set up the system","text":"","category":"section"},{"location":"api/#Skyrmions3D.set_lattice!","page":"API","title":"Skyrmions3D.set_lattice!","text":"set_lattice!(skyrmion, lp = [lpx, lpy, lpz], ls = [lsx, lsy, lsz])\n\nSets the underlying lattice to one with lpxxlpyxlpz points and lsxxlsyxlsz spacings, and reinterpolates skyrmion on the new grid.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_dirichlet!","page":"API","title":"Skyrmions3D.set_dirichlet!","text":"set_dirichlet!(skyrmion::Skyrmion)\n\nSets the skyrmion to have periodic boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_neumann!","page":"API","title":"Skyrmions3D.set_neumann!","text":"set_dirichlet!(skyrmion::Skyrmion)\n\nSets the skyrmion to have Dirichlet boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_periodic!","page":"API","title":"Skyrmions3D.set_periodic!","text":"set_periodic!(skyrmion::Skyrmion)\n\nSets the skyrmion to have periodic boundary conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_mpi!","page":"API","title":"Skyrmions3D.set_mpi!","text":"set_mpi!(skyrmion::Skyrmion, mpi)\n\nSet the pion mass of skyrmion to mpi.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_physical!","page":"API","title":"Skyrmions3D.set_physical!","text":"set_physical!(skyrmion::Skyrmion, is_physical; Fpi = Fpi, ee = ee)\n\nSets skyrmion to use physical units, when is_physical is true.\n\nAlso used to turn off physical units by setting is_physical=false.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_Fpi!","page":"API","title":"Skyrmions3D.set_Fpi!","text":"set_Fpi!(skyrmion::Skyrmion, Fpi)\n\nSets the pion decay constant of skyrmion to Fpi. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.set_ee!","page":"API","title":"Skyrmions3D.set_ee!","text":"set_ee!(skyrmion::Skyrmion, ee)\n\nSets the Skyrme coupling constant of skyrmion to ee. \n\n\n\n\n\n","category":"function"},{"location":"api/#Getters-and-checkers","page":"API","title":"Getters and checkers","text":"","category":"section"},{"location":"api/#Skyrmions3D.get_grid","page":"API","title":"Skyrmions3D.get_grid","text":"get_grid(skyrmion::Skyrmion)\n\nReturns an array of 3D arrays [x, y, z], which can be used in integrals.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.check_if_normalised","page":"API","title":"Skyrmions3D.check_if_normalised","text":"check_if_normalised(skyrmion)\n\nCheck if skyrmion is normalised.\n\nThrows an error if any point is not normalised, i.e. the pion field does not have norm 1.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.get_field","page":"API","title":"Skyrmions3D.get_field","text":"get_field(skyrmion::Skyrmion)\n\nReturns the array of pion fields [π1, π2, π3, π0] of skyrmion, which can be used in integrals.\n\n\n\n\n\n","category":"function"},{"location":"api/#Create","page":"API","title":"Create","text":"","category":"section"},{"location":"api/#Skyrmions3D.make_rational_map!","page":"API","title":"Skyrmions3D.make_rational_map!","text":"make_rational_map!(skyrmion, pfn, qfn, prof = nothing; kwargs...)\n\nWrites a rational map skyrmion in to skyrmion. The rational map is given by the polynomials pfn and qfn as R(z) = p(z)/q(z), and the profile f(r) is prof.\n\nIf prof is nothing, the function will find an OK approximation for the profile.\n\nOptional arguments\n\nbaryon = nothing: if the baryon number is not provided, it will be determined from the rational map\nX = [0.0, 0.0, 0.0]: translate the initial skyrmion by X\niTH = 0.0: isorotate initial skyrmion by iTH about i_n\ni_n = [0.0, 0.0, 1.0]: axis about which to isorotate skyrmion\njTH = 0.0: rotate initial skyrmion by jTH about j_n\nj_n = [0.0, 0.0, 1.0]: axis about which to rotate skyrmion\nprint_things = true: determines whether the function will print the found baryon number (if it is not given)\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.make_RM_product!","page":"API","title":"Skyrmions3D.make_RM_product!","text":"make_RM_product!(skyrmion, X_list)\n\nMakes a product approximation of many rational map skyrmions, determined through the  list X_list. The final field is written into skyrmion.\n\nThe formatting of the list is as follow: X_list = [ data_1, data_2, data_3, ... ] where data_1 = [ p(z), q(z), f(r), X, θiso, n_iso, θrot, n_rot ]\n\nSee also [product]\n\nExample of list\n\np1(z) = z; q1(z) = 1; f1(r) = 4*atan(exp(-r));\np2(z) = z^2; q2(z) = 1; f2(r) = 4*atan(exp(-0.7*r));\nX_list = [ [ p1, q1, f1, [0.0,0.0,1.5], 0.0, [0.0,0.0,1.0], 0.0, [0.0,0.0,1.0] ], [ p2, q2, f2, [0.0,0.0,-1.5], pi, [1.0,0.0,0.0], 0.0, [0.0,0.0,1.0] ] ]\n\nTechnical details\n\nThe product is taken pairwise in order. E.g. for a list of 3 skyrmions, we first calculate the symmetrised product of the first and second skyrmions then calculate the symmtrised product with the third skyrmion. Hence the final solution is not symmetric under permutations.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.make_ADHM!","page":"API","title":"Skyrmions3D.make_ADHM!","text":"make_ADHM!(skyrmion, L, M = nothing; tsteps = 42)\n\nWrites an ADHM skyrmion in to skyrmion. The ADHM data is given by L and M. L and M should be given by B and BxB arrays of Quaternions, from the Quaternions package.\n\nIf M is nothing then it is assumed L is a (B+1)xB array containing all the ADHM data. \n\ntsteps determines the number of steps used to numerically compute the holonomy of the ADHM gauge field.\n\nExample\n\nusing Quaternions\n\nB=2\n\nL = [ Quaternion(0.0,0.0,0.0,0.0) for a in 1:B ]\nM = [ Quaternion(0.0,0.0,0.0,0.0) for a in 1:B, b in 1:B ]\n\nL[1] = Quaternion(0.0, 0.0, 0.0, sqrt(2.0))\nL[2] = Quaternion(0.0, 0.0, sqrt(2.0), 0.0)\n\nM[1,1] = Quaternion(1.0, 0.0, 0.0, 0.0)\nM[1,2] = Quaternion(0.0, 1.0, 0.0, 0.0)\nM[2,1] = Quaternion(0.0, 1.0, 0.0, 0.0)\nM[2,2] = Quaternion(-1.0, 0.0, 0.0, 0.0)\n\nmy_skyrmion = Skyrmion(30,0.2)\nmake_ADHM!(my_skyrmion, L, M)\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.product_approx!","page":"API","title":"Skyrmions3D.product_approx!","text":"product_approx!(skyrmion1, skyrmion2)\n\nMakes the symmetrised product approximation of skyrmion1 and skyrmion2. The output is written in to skyrmion1. The returned field is normalised.\n\nSee also product_approx. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.product_approx","page":"API","title":"Skyrmions3D.product_approx","text":"product_approx(skyrmion1, skyrmion2)\n\nReturns the symmetrised product approximation of skyrmion1 and skyrmion2. The returned field is normalised.\n\nSee also product_approx!.\n\n\n\n\n\n","category":"function"},{"location":"api/#Transform","page":"API","title":"Transform","text":"","category":"section"},{"location":"api/#Skyrmions3D.translate_sk!","page":"API","title":"Skyrmions3D.translate_sk!","text":"translate_sk!(skyrmion; X = [0.0, 0.0, 0.0])\n\nTranslates skyrmion by the 3-Vector X, e.g. X = [1.0, 0.0, 0.0]\n\nSee also translate_sk. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.translate_sk","page":"API","title":"Skyrmions3D.translate_sk","text":"translate_sk(skyrmion; X = [0.0, 0.0, 0.0])\n\nReturns skyrmion translated by 3-Vector X, e.g. X = [1.0, 0.0, 0.0]\n\nSee also translate_sk!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.rotate_sk!","page":"API","title":"Skyrmions3D.rotate_sk!","text":"rotate_sk!(skyrmion; theta = 0, n = [0, 0, 1])\n\nRotates skyrmion by theta around the vector n. The given vector is automatically normalised.\n\nSee also rotate_sk. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.rotate_sk","page":"API","title":"Skyrmions3D.rotate_sk","text":"rotate_sk(skyrmion; theta = 0, n = [0, 0, 1])\n\nReturns skyrmion rotated by theta around the vector n. The given vector is automatically normalised.\n\nSee also rotate_sk!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.isorotate_sk!","page":"API","title":"Skyrmions3D.isorotate_sk!","text":"isorotate_sk!(skyrmion; theta = 0, n = [0, 0, 1])\n\nIsorotates skyrmion by theta around the vector n. The given vector is automatically normalised.\n\nSee also isorotate_sk. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.isorotate_sk","page":"API","title":"Skyrmions3D.isorotate_sk","text":"isorotate_sk(skyrmion; theta = 0, n = [0, 0, 1])\n\nReturns skyrmion isorotated by theta around the vector n. The given vector is automatically normalised.\n\nSee also isorotate_sk!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.center_skyrmion!","page":"API","title":"Skyrmions3D.center_skyrmion!","text":"center_skyrmion!(skyrmion)\n\nTranslates skyrmion so that the center of mass is (0, 0, 0).\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.evaluate_sk","page":"API","title":"Skyrmions3D.evaluate_sk","text":"evaluate_sk(skyrmion, y)\n\nEvaluates the Skyrme field at the spatial position y, using some fancy interpolation method.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.normer","page":"API","title":"Skyrmions3D.normer","text":"normer(skyrmion)\n\nReturns normalised skyrmion.\n\nSee also normer!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.normer!","page":"API","title":"Skyrmions3D.normer!","text":"normer!(skyrmion)\n\nNormalises skyrmion.\n\nSee also normer. \n\n\n\n\n\n","category":"function"},{"location":"api/#Probe","page":"API","title":"Probe","text":"","category":"section"},{"location":"api/#Skyrmions3D.overview","page":"API","title":"Skyrmions3D.overview","text":"overview(skyrmion)\n\nDisplays an overview of skyrmion's properties.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.Energy","page":"API","title":"Skyrmions3D.Energy","text":"Energy(skyrmion; density = false, moment = 0)\n\nCompute energy of skyrmion.\n\nSet 'density = true' to output the energy density and moment to n to calculate the nth moment of the energy density.\n\nSee also get_energy_density!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.get_energy_density!","page":"API","title":"Skyrmions3D.get_energy_density!","text":"get_energy_density!(density, sk; moment = 0)\n\nWrite the energy density of the skyrmion sk to the array density.\n\nSet the moment to n to calculate the nth moment of the density.\n\nSee also Energy.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.Baryon","page":"API","title":"Skyrmions3D.Baryon","text":"Baryon(skyrmion; density = false, moment = 0, component = 0)\n\nCompute baryon number of skyrmion.\n\nSet 'density = true' to output the baryon density and moment to n to calculate the nth moment of the baryon density. Setting also component to i (i=1,2,3) returns the ith component of the density. \n\nSee also get_baryon_density!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.get_baryon_density!","page":"API","title":"Skyrmions3D.get_baryon_density!","text":"get_baryon_density!(baryon_density, sk; moment = 0, component = 0)\n\nWrite the baryon density of the skyrmion sk to the array baryon_density.\n\nSet the moment to n to calculate the nth moment of the density. Set component to i (i=1,2,3) to calculate ith component of the density. \n\nSee also Baryon.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.center_of_mass","page":"API","title":"Skyrmions3D.center_of_mass","text":"center_of_mass(skyrmion)\n\nCompute the center of mass of skyrmion, based on the energy density.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.compute_current","page":"API","title":"Skyrmions3D.compute_current","text":"compute_current(skyrmion; label = \"uMOI\", indices = [0, 0], density = false, moment = 0)\n\nCompute a variety of currents in the Skyrme model, based on a skyrmion. \n\nYou can calculate specific indices using e.g. indices = [1,2]. If indices = [0,0], the function will calculate all indices. If density = false, the function will return the integrated densities, while density = true it will return the densities. \n\nThe possible currents are (currently):\n\nuMOI: the isospin moment of inertia.\nwMOI: the mixed moment of inertia.\nvMOI: the spin moment of inertia.\nuAxial: the u-axial moment of inertia.\nwAxial: the w-axial moment of inertia.\nNoetherIso: the Noether vector current.\nNoetherAxial: the Noether axial current.\nstress: the stress tensor.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.rms_baryon","page":"API","title":"Skyrmions3D.rms_baryon","text":"rms_baryon(skyrmion; component = 0)\n\nCompute root mean square charge radius of a skyrmion, using the baryon density.\n\nSet component to i (i=1,2,3) to calculate the rms radius for just the ith component.\n\n\n\n\n\n","category":"function"},{"location":"api/#Flow","page":"API","title":"Flow","text":"","category":"section"},{"location":"api/#Skyrmions3D.gradient_flow!","page":"API","title":"Skyrmions3D.gradient_flow!","text":"gradient_flow!(skyrmion; steps = 1, tolerance = 0.0, dt = ls^2/100.0, checks = max(100, steps), print_stuff = true, dEdp = zero_array)\n\nApplies a gradient flow to skyrmion with timestep dt (where ls is the average lattice spacing), either for steps steps or until the error falls below tolerance. The error is checked every checks steps.\n\ndEdp is an array, initialised to be the correct shape and 0.0 everywhere, which stores the change in energy density. The flow is verbose, incrementally describing the error and new energy, if print_stuff is true.\n\nSee also arrested_newton_flow!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.arrested_newton_flow!","page":"API","title":"Skyrmions3D.arrested_newton_flow!","text":"arrested_newton_flow!(skyrmion; skyrmion_dot = zero_array, steps = 1, tolerance = 0.0, dt = ls/10.0, checks = max(100, steps), print_stuff = true, method = \"RK4\")\n\nApplies an arrested Newton flow to skyrmion whose initial time derivative field is skyrmion_dot (an array of the correct shape initialised with value 0.0) with timestep dt (where ls is the lattice spacing in the first direction), either for steps steps or until the error falls below tolerance. The error is checked every checks steps.\n\nThe flow is verbose, incrementally describing the error and new energy, if print_stuff is true. method determines how each timestep is carried out: accepted values are \"RK4\" or \"leapfrog\". \n\nSee also gradient_flow!. \n\n\n\n\n\n","category":"function"},{"location":"api/#Visualise","page":"API","title":"Visualise","text":"","category":"section"},{"location":"api/#Skyrmions3D.plot_overview","page":"API","title":"Skyrmions3D.plot_overview","text":"plot_overview(skyrmion; iso_value = 0.5)\n\nPlots the pion fields and a baryon density of skyrmion.\n\nPion field isosurfaces are taken at the value iso_value, while the baryon density isosurface is taken at halfway between the minimum and maximum density value. \n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.plot_field","page":"API","title":"Skyrmions3D.plot_field","text":"plot_field(skyrmion; component = 3, iso_value = 0.5, kwargs...)\n\nPlots an isosurface of constant value, skyrme_field[component] = iso_value. \n\nOptional argument\n\nCan accept any arguments used in Axis3 from the Makie package.\n\n\n\n\n\n","category":"function"},{"location":"api/#Skyrmions3D.plot_baryon_density","page":"API","title":"Skyrmions3D.plot_baryon_density","text":"plot_baryon_density(skyrmion; iso_value = 0.25*(max(BD) + min(BD)), juggling = false, kwargs...)\n\nPlots an isosurface of constant baryon density, with value iso_value, coloured to reveal the pion field structure, originally described in [].\n\nCan use a juggling ball colouring scheme by setting juggling = true.\n\nOptional argument\n\nCan accept any arguments used in Axis3 from the Makie package.\n\n\n\n\n\n","category":"function"},{"location":"api/#Helpers","page":"API","title":"Helpers","text":"","category":"section"},{"location":"api/#Skyrmions3D.R_from_axis_angle","page":"API","title":"Skyrmions3D.R_from_axis_angle","text":"R_from_axis_angle(th, n)\n\nCreates the rotation matrix which acts via left multiplication on a vector to rotate it by angle -th about axis n. The vector n is automatically normalised.\n\n\n\n\n\n","category":"function"},{"location":"making_skyrmions/#Making-Skyrmions","page":"Create Skyrmion","title":"Making Skyrmions","text":"","category":"section"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"Skyrmions in Skyrmions3D are represented by the Skyrmion struct. This contains all the information needed to reproduce the skyrmion: it's pion field, grid, pion mass etc. You can create a Skyrmion by passing some of these parameters, for example","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":" # A skyrmion on a 30^3 grid with lattice spacing 0.2\nmy_skyrmion = Skyrmion(30,0.2)\n\n# A skyrmion on a 60x60x120 grid with lattice spacing 0.15\nanother_skyrmion = Skyrmion([60,60,120],[0.15,0.15,0.15]) \n\n# A skyrmion with pion mass 1 and periodic bounary conditions\nmassive_periodic_skyrmion = Skyrmion(\n    [30,30,30],\n    [0.2,0.2,0.2], \n    mpi=1.0, \n    boundary_conditions=\"periodic\",\n    Fpi=184, \n    ee=4.5,\n)","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"Find out more about the Skyrmion constructor in the API. ","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"By default the pion mass is set equal to (0,0,0,1). So we next want to add some field structure to it...","category":"page"},{"location":"making_skyrmions/#Rational-Maps","page":"Create Skyrmion","title":"Rational Maps","text":"","category":"section"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"A complex rational map is defined by two complex valued polynomials; we call these the numerator p(z) and the denominator q(z). Given these polynomials, we can create a skyrmion from the rational map approximation. For example, the baryon number 3 tetrahedral skyrmion can be constructed as follows:","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"p3(z) = sqrt(3)*im*z^2 - 1\nq3(z) = z*(z^2 - sqrt(3)*im)\nmake_rational_map!(my_skyrmion, p3, q3)","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"Note: By convention the \"bang\" character ! at the end of function means it is a modifiying function. So we are modifiying my_skyrmion, not creating a new skyrmion.","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"The make_rational_map! function tries to estimate the degree of the rational map, and tries to find a reasonable profile function for it. If this all worked, you should get a sensible output when you compute the energy of the skyrmion.","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"Energy(my_skyrmion)\n>>> 4.106354608768089","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"Find out more about computing skyrmion properties in the (computing properties section)[].","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"The make_rational_map! function also accepts custom profile functions.","category":"page"},{"location":"making_skyrmions/#ADHM-data","page":"Create Skyrmion","title":"ADHM data","text":"","category":"section"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"ADHM skyrmions are skyrmions generated from ADHM data. The data consists of symmetric quaternionic matrices which satisfy a constraint. Most highly symmetric skyrmions can be represented by ADHM data. This package implements the very efficient parallel transport algorithm from Derek Harland. We can make the baryon number 2 toroidal skyrmion as follows:","category":"page"},{"location":"making_skyrmions/","page":"Create Skyrmion","title":"Create Skyrmion","text":"using Quaternions\n\nB=2\nadhm_data = [ Quaternion(0.0,0.0,0.0,0.0) for a in 1:B+1, b in 1:B]\n\nlam = 1.0\nadhm_data[1,1] = Quaternion(0.0,0.0,0.0,1.0)*lam\nadhm_data[1,2] = Quaternion(0.0,0.0,1.0,0.0)*lam\n\nadhm_data[2,1] = Quaternion(1.0,0.0,0.0,0.0)*lam/sqrt(2)\nadhm_data[2,2] = Quaternion(0.0,1.0,0.0,0.0)*lam/sqrt(2)\n\nadhm_data[3,1] = Quaternion(0.0,1.0,0.0,0.0)*lam/sqrt(2)\nadhm_data[3,2] = Quaternion(-1.0,0.0,0.0,0.0)*lam/sqrt(2)\n\nmake_ADHM!(my_skyrmion, adhm_data)","category":"page"},{"location":"contributing/#Contributing","page":"Contribute","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"There are many way to contribute to Skyrmions3D using the functionality of Git and GitHub. These include (but are not limited to)","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"adding examples to the documentation,\nfixing bugs and typos,\nimplementing new skyrmion types. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you want to do any of the above, first raise an issue on the GitHub page to discuss the idea with others. This conversation can help understand exactly the best way to fix a bug / implement a new feature using the experience of the community. Issues should be well written: if you are reporting a bug you should provide a minimal reproducible example of the bug as well as the details of which version of the code you are using and your coding environment, if you are suggesting an enhancement provide evidence that the enhancement is worthwhile including links to relevant research. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"To then make the change, fork the Skyrmions3D repository on GitHub, make the edits to your fork of the source code, test the code, and then open a pull request. After you have opened the pull request, other members of the community will review the changes. They may add comments, request tweaks to the code, or add changes of their own. More about pull requests can be read here. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you are regularly using Skyrmions3D, it is integral for a project you are undertaking, or the change you are planning could take a long time, you will likely want to want to use branches. These let you make edits to your fork of the code while continually maintaining a working version on your machine. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"When you open a pull request provide a link in the description to the existing issue this addresses, along with any other information that can better help the community evaluate the code. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you would like further guidance on best practices in coding, see the Julia style guide and GitHub's guide for contributors. ","category":"page"},{"location":"contributing/#Run-tests-locally","page":"Contribute","title":"Run tests locally","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"When you submit a PR, a GitHub workflow will automatically test your code. But it can be helpful to run the test suite yourself locally first. To do so, change directory to the project and run Julia with the additional flag --project=.. Then import Pkg and run Pkg.tests(). You can do this in a one-liner like so:","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"julia --project=path/to/Skyrmions3D.jl -e \"using Pkg; Pkg.test()\"","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"or by changing directory to the project and running ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"julia --project=. test/runtests.jl","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"The latter is faster but will not work if changes have been made to the package which require updating the package dependencies. ","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"If you fix a bug or add a new feature, consider adding a test to an appropriate file in the test suite (e.g. test/do_diff_tests.jl); more on testing can be found in the Julia documentation. ","category":"page"},{"location":"contributing/#Build-docs-locally","page":"Contribute","title":"Build docs locally","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"When you submit a PR, a GitHub workflow will automatically build the docs for you. But it can be helpful to build them yourself locally. To do so, first change directory to the docs subdirectory in the project folder. Then build the docs using","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"julia --project=. make.jl","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"This will create the documentation website in <project_directory>/docs/build/. You can view the documentation by opening the file <project_directory>/docs/build/index.html in a web browser (on Mac, you can use open ./build/index.html to do this).","category":"page"},{"location":"contributing/#Using-a-pre-commit-hook-to-format-your-code","page":"Contribute","title":"Using a pre-commit hook to format your code","text":"","category":"section"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"We use JuliaFormatter to format our code in a consistent way. It can be annoying to remember to run this every time you make code changes. A  solution is to create a pre-commit hook in your development workflow. This checks and updates the formatting of any code that you are trying to commit to the project, before you commit it.","category":"page"},{"location":"contributing/","page":"Contribute","title":"Contribute","text":"To set this up, you need to install pre-commit. One way to do this is using uvx. First,  install uv. Then, go to the Skyrmions3D.jl folder using Terminal and run uvx pre-commit install. This will set up a \"hook\" so that  the pre-commit defined in .pre-commit-config.yaml will run before you git commit any files.","category":"page"},{"location":"transform/#Transforming-and-Combining-Skyrmions","page":"Transform and Combine","title":"Transforming & Combining Skyrmions","text":"","category":"section"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Once you have a skyrmion, there's a lot you can do with it. Suppose you've made a B=2 torus like so","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"using Skyrmions3D\ntoroidal_skyrmion = Skyrmion(30,0.2)\np(z) = z^2\nq(z) = 1\nmake_rational_map!(toroidal_skyrmion, p, q)","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"It's important here to remember that functions ending in ! modify the skyrmion, while functions with no ! will return a new skyrmion. With that in mind, you could now apply a...","category":"page"},{"location":"transform/#Translation","page":"Transform and Combine","title":"Translation","text":"","category":"section"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Translations take in a skyrmion and a 3-vector. You can make a new skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"X = [0.0,0.0,1.0]\ntranslated_skyrmion = translate_sk(toroidal_skyrmion, X=X)","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"or modify an existing skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"translate_sk!(toroidal_skyrmion, X=X)","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"You can also \"center\" your skyrmion. This computes the center of mass, then translates so that the skyrmion has zero center of mass:","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"# compute CoM for the translated skyrmion\ncenter_of_mass(toroidal_skyrmion)\n>>>3-element Vector{Float64}:\n -7.075309546463488e-17\n -2.5354376531123876e-17\n  0.976781807200457","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"center_skyrmion!(toroidal_skyrmion)\ncenter_of_mass(toroidal_skyrmion)\n>>>3-element Vector{Float64}:\n -1.0516044516158566e-16\n  8.101616160453117e-17\n  1.0194091904102672e-8","category":"page"},{"location":"transform/#Rotation","page":"Transform and Combine","title":"Rotation","text":"","category":"section"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Rotations take in a skyrmion, an angle and a rotation vector. You can make a new skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"rotated_skyrmion = rotate_sk(toroidal_skyrmion, theta=pi/4, n=[1.0,0.0,0.0])","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"or modify an existing skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"theta = pi/4\nn = [1.0,0.0,0.0]\nrotate_sk!(toroidal_skyrmion, theta=theta, n=n)","category":"page"},{"location":"transform/#Isorotation","page":"Transform and Combine","title":"Isorotation","text":"","category":"section"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Isorotations take in a skyrmion, an angle and a rotation vector. You can make a new skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"isorotated_skyrmion = isorotate_sk(toroidal_skyrmion, theta=pi/4, n=[1.0,0.0,0.0])","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"or modify an existing skyrmion","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"theta = pi/4\nn = [1.0,0.0,0.0]\nisorotate_sk!(toroidal_skyrmion, theta=theta, n=n)","category":"page"},{"location":"transform/#Product-Approximation","page":"Transform and Combine","title":"Product Approximation","text":"","category":"section"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"We can also combine skyrmions using the Product Approximation. This codebase always applies a symmetrised product approx. Let's first create two tori","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"p(z) = z^2\nq(z) = 1\nmake_rational_map!(toroidal_skyrmion, p, q)\n\nskyrmion_up = translate_sk(toroidal_skyrmion, X=[0.0,0.0,1.5])\nskyrmion_down = translate_sk(toroidal_skyrmion, X=[0.0,0.0,-1.5])","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Then apply a product approximation","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"product_skyrmion = product_approx(skyrmion_up, skyrmion_down)\nBaryon(product_skyrmion)\n>>> 3.938613862543325","category":"page"},{"location":"transform/","page":"Transform and Combine","title":"Transform and Combine","text":"Oop, the product skyrmion is losing some baryon density - the box might be a bit small!","category":"page"},{"location":"citations/#Publications-citing-Skyrmions3D","page":"Citations","title":"Publications citing Skyrmions3D","text":"","category":"section"},{"location":"citations/","page":"Citations","title":"Citations","text":"Below is an (incomplete) list of publications that cite Skyrmions3D. The publications are listed in chronological order. See the section below on how to cite Skyrmions3D in your publication. ","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"If you have just cited Skyrmions3D in your publication, please consider adding it to this list by raising a pull request, or get in touch so we can add it. ","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"J. Cork and L. Disney-Hogg. Locations of JNR Skyrmions. Mathematical Physics, Analysis and Geometry, 28(17), 2025.\nA. Garcia Martin-Caro, M. Huidobro and Y. Hatta. Nuclear mass radius and pressure in the Skyrme model. Physical Review D, 110(3), 2024. \nJ. Cork and D. Harland. Finkelstein–Rubinstein constraints from ADHM data and rational maps. Physics Letters B, 850, 2024.\nA. Garcia Martin-Caro and C. Halcrow. The charge density and neutron skin thickness of Skyrmions. arXiv, 2312.04335, 2023. ","category":"page"},{"location":"citations/#How-to-cite-Skyrmions3D","page":"Citations","title":"How to cite Skyrmions3D","text":"","category":"section"},{"location":"citations/","page":"Citations","title":"Citations","text":"In the root directory of the repository you will see a file called CITATION.cff, which provides the necessary details to cite the project. GitHub provides the functionality to export this citation in APA or BibTeX format, see more here. ","category":"page"},{"location":"properties/#Properties","page":"Compute properties","title":"Properties","text":"","category":"section"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"A skyrmion has many properties. In general, Skyrmions3D allows you to compute the integrand or integral of the property in question. For all the following examples, if you pass density=true you'll get the integrand. You can also get the nth moment by passing moment=n.","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Suppose you have a B=4 cubic skyrmion","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"using Skyrmions3D\nskyrmion = Skyrmion(40,0.2)\np4(z) = z^4 + 2*sqrt(3)*im*z^2 + 1\nq4(z) = z^4 - 2*sqrt(3)*im*z^2 + 0\nmake_rational_map!(skyrmion, p4, q4)","category":"page"},{"location":"properties/#Baryon-number","page":"Compute properties","title":"Baryon number","text":"","category":"section"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Basic use:","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Baryon(skyrmion)\n>>> 3.968749058206481","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Other examples:","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"baryon_density = Baryon(skyrmion, density=true)\nrms_baryon = sqrt(Baryon(skyrmion, moment=2))\n>>> 3.882435997469747","category":"page"},{"location":"properties/#Energy","page":"Compute properties","title":"Energy","text":"","category":"section"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Basic use:","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Energy(skyrmion)\n>>> 5.371145445834469","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Note: you can turn on physical units to get the energy in those units:","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"skyrmion.Fpi = 174\nskyrmion.ee = 3\nskyrmion.physical = true\nEnergy(skyrmion)\n>>> (6149.285364807477, \"MeV\")","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Note that the energy of the skyrmion is dependent both on its underlying pion field (which determines the ernergy density at a point) but also the grid, as the energy is calculated as the sum of the energy density over the grid. If the grid is not sufficiently large, the computed energy will be smaller than the 'true' value. ","category":"page"},{"location":"properties/#Currents","page":"Compute properties","title":"Currents","text":"","category":"section"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"For currents, we use the function compute_current and pass a label. We list the currents and labels now:","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Rotational moment of intertia, vMOI\nIsorotational moment of intertia, uMOI\nMixed moment of intertia, wMOI\nIso-Axial, uAxial\nRotational-Axial, vAxial\nStress-tensor, stress\nNoether-iso, NoetherIso\nNoether-axial, NoetherAxial","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"Like the Energy and Baryon we can get the densities by passing density=true and the nth moment by passing moment=n. For instance, the Isorotational moment of inertia of the cubic rational map skyrmion is","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"U = compute_current(skyrmion, label=\"uMOI\")","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"The density of the stress-tensor is given by","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"stress_density = compute_current(skyrmion, label=\"stress\", density=true)","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"The second moment of the Noether-iso current is","category":"page"},{"location":"properties/","page":"Compute properties","title":"Compute properties","text":"why_am_i_computing_this = compute_current(skyrmion, label=\"NoetherIso\", density=false, moment=2)","category":"page"},{"location":"flow/#Flow","page":"Flow","title":"Flow","text":"","category":"section"},{"location":"flow/","page":"Flow","title":"Flow","text":"After generating an initial Skyrmion, you can evolve it in a number of ways. Currently, only energy minimising flows are implemented in Skyrmions3D. ","category":"page"},{"location":"flow/#Gradient-Flow","page":"Flow","title":"Gradient Flow","text":"","category":"section"},{"location":"flow/","page":"Flow","title":"Flow","text":"The simplest of these is a simple gradient flow, which models the differential equation","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"dotboldsymbolpi = -fracdelta Edelta boldsymbolpi","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"Suppose we have B=4 rational map skyrmion, but modified so that it doesn't have cubic symmetry (which is the symmetry of the energy minimiser).","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"using Skyrmions3D\nskyrmion = Skyrmion(60,0.15)\np4(z) = z^4 + 3*sqrt(2)*im*z^2 + 1\nq4(z) = z^4 - 3*sqrt(2)*im*z^2 + 1\nmake_rational_map!(skyrmion, p4, q4)","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"You can apply a gradient flow like so:","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"gradient_flow!(skyrmion)","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"When you just pass the skyrmion, the algorithm will get applied for one step with an automatically chosen time-step. If you'd like to run the gradient flow for a bit longer (advised!) or for your own custom time-step, you can as follows:","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"gradient_flow!(skyrmion, steps=100, dt=0.0001)\n\n>>> initial: energy: 5.821941850733913\nafter 100 steps, error = 11.52\nfinal energy: 5.545750226541662","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"Alternatively, you can specify a tolerance tolerance, which will allow the gradient flow to run until","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"textmax_textgrid  fracdelta Edelta boldsymbolpi  leq texttttolerance","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"as follows:","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"gradient_flow!(skyrmion, tolerance=1.0)","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"Note that, depending on your boundary conditions and lattice size, your specified tolerance might be impossible to obtain.","category":"page"},{"location":"flow/#Arrested-Newton-Flow","page":"Flow","title":"Arrested Newton Flow","text":"","category":"section"},{"location":"flow/","page":"Flow","title":"Flow","text":"A more efficient algorith is the Newton Flow method. This models the second order differential equation","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"ddotboldsymbolpi = -fracdelta Edelta boldsymbolpi","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"But whenever the energy increases, the velocity is reset to zero. This has two advantages: usually, the minimum is found in less flow time; and the second-order time evolution allows for a larger time-step. Flow using Arrested Newton as follows:","category":"page"},{"location":"flow/","page":"Flow","title":"Flow","text":"arrested_newton_flow!(skyrmion, tolerance=0.01)","category":"page"},{"location":"visualisation/#Visualisation","page":"Visualise","title":"Visualisation","text":"","category":"section"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"Suppose we've made a tetrahedral B=3 rational map skyrmion:","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"using Skyrmions3D\n\n # A skyrmion on a 30^3 grid with lattice spacing 0.2\nmy_skyrmion = Skyrmion(30,0.2)\np3(z) = sqrt(3)*im*z^2 - 1\nq3(z) = z*(z^2 - sqrt(3)*im)\nmake_rational_map!(my_skyrmion, p3, q3)","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"It would be nice to visualise this. Depending on your set-up, visualisation will work in different ways. On this page, we'll focus on static plots from the terminal.","category":"page"},{"location":"visualisation/#Plotting-fields","page":"Visualise","title":"Plotting fields","text":"","category":"section"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"We can plot the field with component 3 and isosurface with iso_value=0.3 as follows:","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"plot_field(my_skyrmion, iso_value=0.3, component=3)","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"This might appear under your cell in Jupyter Notebook, pop-up in a seperate window, or something else. Hopefully whatever happens, you can see the following plot:","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"<img src=\"../../../src/images/visualisation/B3_field.png>","category":"page"},{"location":"visualisation/#Saving-figures","page":"Visualise","title":"Saving figures","text":"","category":"section"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"The function plot_field, and all other plotting functions return a Makie Figure. We can save these","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"using Makie\nfig = plot_field(my_skyrmion, iso_value=0.3, component=3)\nMake.save(\"my_figure.png\", fig)","category":"page"},{"location":"visualisation/#Plotting-the-baryon-density","page":"Visualise","title":"Plotting the baryon density","text":"","category":"section"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"We can also plot the baryon density ","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"plot_baryon_density(my_skyrmion)","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"This function will automatically compute a reasonable iso_value, but you can insert your own if you'd like.","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"I also implemented a fairly hideous juggling colouring. This can be useful to see symmetries. If you'd like to make this more attractive, please submit a PR!!","category":"page"},{"location":"visualisation/","page":"Visualise","title":"Visualise","text":"plot_baryon_density(my_skyrmion)","category":"page"},{"location":"#Skyrmions3D","page":"Home","title":"Skyrmions3D","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for creating, manipulating and probing Skyrmions, in the Skyrme model of nuclear physics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you don't have it, install Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once Julia is installed, you can enter the language REPL by typing julia into your terminal / command line. When inside, you should see julia> at the left-hand side of your terminal.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now go into package mode by typing ]. Now something like @(v1.11) > should appear at the left-hand side of your terminal. You are now in Julia's package manager. From here, you can install Skyrmions3D by typing","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/chrishalcrow/Skyrmions3D.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"When installing the package, Julia will install all other packages Skyrmions3D depends on. This might take a little while.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once it's installed, go back to the Julia REPL (either by typing backspace from package mode, or by typing julia into your base terminal). You can now \"use\" Skyrmions3D by typing using Skyrmions3D. If this works, you've installed the package!","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have any problems installing the package, please post an issue on the github page.","category":"page"},{"location":"#Learning-resources","page":"Home","title":"Learning resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Details of how to make, transform, compute properties of, flow and visualise skyrmions can be found in the sidebar. The API contains descriptions of all exposed functions from the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is  a tutorial available on the main github repo, either as a Julia file or a Jupyter notepad.","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have also made one or two YouTube videos about the package.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I am Chris Halcrow, a research software engineer at the University of Edinburgh. I would love there to be more authors of this package. Please join in.","category":"page"}]
}
